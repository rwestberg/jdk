name: Submit tests

on:
  push:
    branches-ignore: [master]
  workflow_dispatch:
    inputs:
      tests:
        description: 'Tests to run (see testing.md for examples)'
        required: true
        default: 'tier1'
    
env:
  BOOT_JDK_VERSION: '14.0.2'
  JTREG_VERSION: 'jtreg5.1-b01'
  GTEST_VERSION: 'release-1.8.1'

jobs:
  prerequisites_shared:
    name: Shared prerequisites
    runs-on: 'ubuntu-latest'
    steps:
    - name: Check if a jtreg image is present in the cache
      id: jtreg
      uses: actions/cache@v2
      with:
        path: ~/jtreg/
        key: jtreg-${{ env.JTREG_VERSION }}-v1

    - name: Checkout the jtreg source
      uses: actions/checkout@v2
      with:
        repository: 'openjdk/jtreg'
        ref: ${{ env.JTREG_VERSION }}
      if: steps.jtreg.outputs.cache-hit != 'true'

    - name: Build jtreg
      run: sh make/build-all.sh ${JAVA_HOME}
      if: steps.jtreg.outputs.cache-hit != 'true'

    - name: Move jtreg image to destination folder
      run: mv build/images/jtreg ~/
      if: steps.jtreg.outputs.cache-hit != 'true'

  linux_x86_64:
    if: false
    name: Linux x86_64
    runs-on: 'ubuntu-latest'
    needs: prerequisites_shared
    env:
      BOOT_JDK_FILENAME: 'openjdk-14.0.2_linux-x64_bin.tar.gz'
      BOOT_JDK_URL: 'https://download.java.net/java/GA/jdk14.0.2/205943a0976c4ed48cb16f1043c5c647/12/GPL/openjdk-14.0.2_linux-x64_bin.tar.gz'
      BOOT_JDK_SHA256: '91310200f072045dc6cef2c8c23e7e6387b37c46e9de49623ce0fa461a24623d'

    steps:
    - name: Checkout the source
      uses: actions/checkout@v2
      with:
        path: jdk

    - name: Restore boot JDK from cache
      id: bootjdk
      uses: actions/cache@v2
      with:
        path: ~/bootjdk/${{ env.BOOT_JDK_VERSION }}
        key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-v1

    - name: Create boot JDK destination folder
      run: mkdir -p ${HOME}/bootjdk/${BOOT_JDK_VERSION}
      if: steps.bootjdk.outputs.cache-hit != 'true'

    - name: Download boot JDK
      run: wget -O "${HOME}/bootjdk/${BOOT_JDK_FILENAME}" "${BOOT_JDK_URL}"
      if: steps.bootjdk.outputs.cache-hit != 'true'

    - name: Verify boot JDK
      run: echo "${BOOT_JDK_SHA256} ${HOME}/bootjdk/${BOOT_JDK_FILENAME}" | sha256sum -c >/dev/null -
      if: steps.bootjdk.outputs.cache-hit != 'true'

    - name: Unpack boot JDK
      run: tar -xf "${HOME}/bootjdk/${BOOT_JDK_FILENAME}" -C "${HOME}/bootjdk/${BOOT_JDK_VERSION}"
      if: steps.bootjdk.outputs.cache-hit != 'true'

    - name: Restore jtreg from cache
      id: jtreg
      uses: actions/cache@v2
      with:
        path: ~/jtreg/
        key: jtreg-${{ env.JTREG_VERSION }}-v1

    - name: Checkout gtest sources
      uses: actions/checkout@v2
      with:
        repository: 'google/googletest'
        ref: ${{ env.GTEST_VERSION }}
        path: gtest

    - name: Install dependencies
      run: sudo apt-get install libxrandr-dev libxtst-dev libcups2-dev libasound2-dev

    - name: Configure
      run: bash configure --enable-debug --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA} --with-version-build=0 --with-boot-jdk=${HOME}/bootjdk/${BOOT_JDK_VERSION}/jdk-${BOOT_JDK_VERSION} --with-jtreg=${HOME}/jtreg --with-gtest=${GITHUB_WORKSPACE}/gtest
      working-directory: jdk

    - name: 'Run manually selected tests (${{ github.event.inputs.tests }})'
      run: make test TEST="${TESTS}"
      working-directory: jdk
      env: 
        TESTS: ${{ github.event.inputs.tests }}
      if: github.event.inputs.tests != ''

    - name: 'Run default test selection (tier1)'
      run: make test TEST=tier1
      working-directory: jdk
      if: github.event.inputs.tests == ''

    - name: Persist build and test logs
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: linux_x86_64_logs
        path: |
          jdk/build/*/build.log
          jdk/build/*/test-results/
          jdk/build/*/test-resupport/

  windows_x86_64:
    if: true
    name: Windows x86_64
    runs-on: 'windows-latest'
    needs: prerequisites_shared
    env:
      BOOT_JDK_FILENAME: 'openjdk-14.0.2_windows-x64_bin.zip'
      BOOT_JDK_URL: 'https://download.java.net/java/GA/jdk14.0.2/205943a0976c4ed48cb16f1043c5c647/12/GPL/openjdk-14.0.2_windows-x64_bin.zip'
      BOOT_JDK_SHA256: '20600c0bda9d1db9d20dbe1ab656a5f9175ffb990ef3df6af5d994673e4d8ff9'

    steps:
    - name: Restore cygwin from cache
      id: cygwin
      uses: actions/cache@v2
      with:
        path: ~/cygwin/cygwin64
        key: cygwin-v1      

    - name: Create cygwin destination folder
      run: mkdir -p $HOME\cygwin
      if: steps.cygwin.outputs.cache-hit != 'true'

    - name: Download cygwin
      run: '& curl -L "https://www.cygwin.com/setup-x86_64.exe" -o "$HOME/cygwin/setup-x86_64.exe"'
      if: steps.cygwin.outputs.cache-hit != 'true'

#    - name: Verify cygwin
#      run: $FileHash = Get-FileHash -Algorithm SHA256 "$env:HOME/bootjdk/$env:BOOT_JDK_FILENAME" ; $FileHash.Hash -eq $env:BOOT_JDK_SHA256
#      if: steps.bootjdk.outputs.cache-hit != 'true'

    - name: Install cygwin
      run: 'Start-Process -FilePath "$HOME\cygwin\setup-x86_64.exe" -ArgumentList "--quiet-mode --root $HOME\cygwin\cygwin64 --local-package-dir $HOME\cygwin --site http://mirrors.kernel.org/sourceware/cygwin --no-desktop --no-shortcuts --no-startmenu --no-admin" -Wait -NoNewWindow'
      if: steps.cygwin.outputs.cache-hit != 'true'

    - name: What's the source
      run: type "$HOME\cygwin\cygwin64\cygwin.bat"
      if: steps.cygwin.outputs.cache-hit != 'true'

    - name: Look at cygwin bin
      run: Get-ChildItem -Recurse "C:\Users\runneradmin\cygwin\cygwin64\bin"
      if: steps.cygwin.outputs.cache-hit != 'true'

    - name: Try running cygwin
      run: 'Start-Process -FilePath "$HOME\cygwin\cygwin64\cygwin.bat" -ArgumentList "echo hello there" -Wait -NoNewWindow'
      if: ${{ always() }}

    - name: Try setting path
      run: 'echo $env:PATH'
      env: 
        PATH: '%HOME%\cygwin\cygwin64\bin;%PATH%'
      if: steps.cygwin.outputs.cache-hit != 'true'

    - name: Try running cygwin 2
      run: '& "$HOME\cygwin\cygwin64\bin\bash.exe" echo hello there'
      env: 
        PATH: 'C:\Users\runneradmin\cygwin\cygwin64\bin;%PATH%'
      if: ${{ always() }}

    - name: Try running cygwin 3
      run: '& "$HOME\cygwin\cygwin64\bin\mintty.exe" bash.exe echo hello there'
      env: 
        PATH: 'C:\Users\runneradmin\cygwin\cygwin64\bin;%PATH%'
      if: ${{ always() }}

    - name: Look at cygwin
      run: Get-ChildItem -Recurse "$HOME\cygwin"
      if: steps.cygwin.outputs.cache-hit != 'true'

    - name: Checkout the source
      uses: actions/checkout@v2
      with:
        path: jdk

    - name: Restore boot JDK from cache
      id: bootjdk
      uses: actions/cache@v2
      with:
        path: ~/bootjdk/${{ env.BOOT_JDK_VERSION }}
        key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-v1

    - name: Create boot JDK destination folder
      run: mkdir -p "$HOME\bootjdk\$env:BOOT_JDK_VERSION"
      if: steps.bootjdk.outputs.cache-hit != 'true'

    - name: Download boot JDK
      run: '& curl -L "$env:BOOT_JDK_URL" -o "$HOME/bootjdk/$env:BOOT_JDK_FILENAME"'
      if: steps.bootjdk.outputs.cache-hit != 'true'

    - name: Verify boot JDK
      run: $FileHash = Get-FileHash -Algorithm SHA256 "$HOME/bootjdk/$env:BOOT_JDK_FILENAME" ; $FileHash.Hash -eq $env:BOOT_JDK_SHA256
      if: steps.bootjdk.outputs.cache-hit != 'true'

    - name: Unpack boot JDK
      run: '& tar -xf "$HOME/bootjdk/$env:BOOT_JDK_FILENAME" -C "$HOME/bootjdk/$env:BOOT_JDK_VERSION"'
      if: steps.bootjdk.outputs.cache-hit != 'true'

    - name: Restore jtreg from cache
      id: jtreg
      uses: actions/cache@v2
      with:
        path: ~/jtreg/
        key: jtreg-${{ env.JTREG_VERSION }}-v1

    - name: Checkout gtest sources
      uses: actions/checkout@v2
      with:
        repository: 'google/googletest'
        ref: ${{ env.GTEST_VERSION }}
        path: gtest

#    - name: Install dependencies
#      run: sudo apt-get install libxrandr-dev libxtst-dev libcups2-dev libasound2-dev

    - name: Configure
      run: '& $HOME\cygwin\cygwin64\bin\bash configure --enable-debug "--with-version-opt=$env:GITHUB_ACTOR-$env:GITHUB_SHA" --with-version-build=0 "--with-boot-jdk=$HOME/bootjdk/$env:BOOT_JDK_VERSION/jdk-$env:BOOT_JDK_VERSION" "--with-jtreg=$HOME/jtreg" "--with-gtest=$env:GITHUB_WORKSPACE/gtest"'
      working-directory: jdk

    - name: 'Run manually selected tests (${{ github.event.inputs.tests }})'
      run: make test TEST="${TESTS}"
      working-directory: jdk
      env: 
        TESTS: ${{ github.event.inputs.tests }}
      if: github.event.inputs.tests != ''

    - name: 'Run default test selection (tier1)'
      run: make test TEST=tier1
      working-directory: jdk
      if: github.event.inputs.tests == ''

    - name: Persist build and test logs
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: windows_x86_64_logs
        path: |
          jdk/build/*/build.log
          jdk/build/*/test-results/
          jdk/build/*/test-resupport/

  macos_x86_64:
    if: false
    name: macOS x86_64
    runs-on: 'macos-latest'
    needs: prerequisites_shared
    env:
      BOOT_JDK_FILENAME: 'openjdk-14.0.2_osx-x64_bin.tar.gz'
      BOOT_JDK_URL: 'https://download.java.net/java/GA/jdk14.0.2/205943a0976c4ed48cb16f1043c5c647/12/GPL/openjdk-14.0.2_osx-x64_bin.tar.gz'
      BOOT_JDK_SHA256: '386a96eeef63bf94b450809d69ceaa1c9e32a97230e0a120c1b41786b743ae84'

    steps:
    - name: Checkout the source
      uses: actions/checkout@v2
      with:
        path: jdk

    - name: Restore boot JDK from cache
      id: bootjdk
      uses: actions/cache@v2
      with:
        path: ~/bootjdk/${{ env.BOOT_JDK_VERSION }}
        key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-v2

    - name: Create boot JDK destination folder
      run: mkdir -p ${HOME}/bootjdk/${BOOT_JDK_VERSION}
      if: steps.bootjdk.outputs.cache-hit != 'true'

    - name: Download boot JDK
      run: wget -O "${HOME}/bootjdk/${BOOT_JDK_FILENAME}" "${BOOT_JDK_URL}"
      if: steps.bootjdk.outputs.cache-hit != 'true'

    - name: Verify boot JDK
      run: echo "${BOOT_JDK_SHA256}  ${HOME}/bootjdk/${BOOT_JDK_FILENAME}" | shasum -a 256 -c >/dev/null -
      if: steps.bootjdk.outputs.cache-hit != 'true'

    - name: Unpack boot JDK
      run: tar -xf "${HOME}/bootjdk/${BOOT_JDK_FILENAME}" -C "${HOME}/bootjdk/${BOOT_JDK_VERSION}"
      if: steps.bootjdk.outputs.cache-hit != 'true'

    - name: Restore jtreg from cache
      id: jtreg
      uses: actions/cache@v2
      with:
        path: ~/jtreg/
        key: jtreg-${{ env.JTREG_VERSION }}-v1

    - name: Checkout gtest sources
      uses: actions/checkout@v2
      with:
        repository: 'google/googletest'
        ref: ${{ env.GTEST_VERSION }}
        path: gtest

    - name: Configure
      run: bash configure --enable-debug --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA} --with-version-build=0 --with-boot-jdk=${HOME}/bootjdk/${BOOT_JDK_VERSION}/jdk-${BOOT_JDK_VERSION}.jdk/Contents/Home --with-jtreg=${HOME}/jtreg --with-gtest=${GITHUB_WORKSPACE}/gtest
      working-directory: jdk

    - name: 'Run manually selected tests (${{ github.event.inputs.tests }})'
      run: make test TEST="${TESTS}"
      working-directory: jdk
      env: 
        TESTS: ${{ github.event.inputs.tests }}
      if: github.event.inputs.tests != ''

    - name: 'Run default test selection (tier1)'
      run: make test TEST=tier1
      working-directory: jdk
      if: github.event.inputs.tests == ''

    - name: Persist build and test logs
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: macos_x86_64_logs
        path: |
          jdk/build/*/build.log
          jdk/build/*/test-results/
          jdk/build/*/test-resupport/          
